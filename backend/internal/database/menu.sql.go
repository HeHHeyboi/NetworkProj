// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: menu.sql

package database

import (
	"context"
	"database/sql"
)

const addMenu = `-- name: AddMenu :one
INSERT INTO menu(name,price,type,menu_type) 
VALUES(?,?,?,?)
RETURNING menu_id, name, price, menu_type, type
`

type AddMenuParams struct {
	Name     string
	Price    float64
	Type     sql.NullString
	MenuType string
}

func (q *Queries) AddMenu(ctx context.Context, arg AddMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, addMenu,
		arg.Name,
		arg.Price,
		arg.Type,
		arg.MenuType,
	)
	var i Menu
	err := row.Scan(
		&i.MenuID,
		&i.Name,
		&i.Price,
		&i.MenuType,
		&i.Type,
	)
	return i, err
}

const deleteAllMenu = `-- name: DeleteAllMenu :exec
DELETE FROM menu
`

func (q *Queries) DeleteAllMenu(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMenu)
	return err
}

const deleteMenuByID = `-- name: DeleteMenuByID :exec
DELETE FROM menu
WHERE menu_id = ?
`

func (q *Queries) DeleteMenuByID(ctx context.Context, menuID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMenuByID, menuID)
	return err
}

const deleteMenuByName = `-- name: DeleteMenuByName :one
DELETE FROM menu
WHERE name = ?
RETURNING menu_id
`

func (q *Queries) DeleteMenuByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteMenuByName, name)
	var menu_id int64
	err := row.Scan(&menu_id)
	return menu_id, err
}

const getAllMenuType = `-- name: GetAllMenuType :many
SELECT menu_type FROM menu
`

func (q *Queries) GetAllMenuType(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenuType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var menu_type string
		if err := rows.Scan(&menu_type); err != nil {
			return nil, err
		}
		items = append(items, menu_type)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMenus = `-- name: GetAllMenus :many
SELECT menu_id, name, price, menu_type, type FROM menu
`

func (q *Queries) GetAllMenus(ctx context.Context) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Menu
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.MenuID,
			&i.Name,
			&i.Price,
			&i.MenuType,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllType = `-- name: GetAllType :many
SELECT type FROM menu
`

func (q *Queries) GetAllType(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getAllType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var type_ sql.NullString
		if err := rows.Scan(&type_); err != nil {
			return nil, err
		}
		items = append(items, type_)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuByID = `-- name: GetMenuByID :one
SELECT menu_id, name, price, menu_type, type FROM menu
WHERE menu_id = ?
`

func (q *Queries) GetMenuByID(ctx context.Context, menuID int64) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenuByID, menuID)
	var i Menu
	err := row.Scan(
		&i.MenuID,
		&i.Name,
		&i.Price,
		&i.MenuType,
		&i.Type,
	)
	return i, err
}

const getMenuByName = `-- name: GetMenuByName :one
SELECT menu_id, name, price, menu_type, type FROM menu
WHERE name = ?
`

func (q *Queries) GetMenuByName(ctx context.Context, name string) (Menu, error) {
	row := q.db.QueryRowContext(ctx, getMenuByName, name)
	var i Menu
	err := row.Scan(
		&i.MenuID,
		&i.Name,
		&i.Price,
		&i.MenuType,
		&i.Type,
	)
	return i, err
}

const updateMenuByID = `-- name: UpdateMenuByID :one
UPDATE menu
SET name = ?, menu_type = ? ,type = ?, price = ?
WHERE menu_id = ?
RETURNING menu_id, name, price, menu_type, type
`

type UpdateMenuByIDParams struct {
	Name     string
	MenuType string
	Type     sql.NullString
	Price    float64
	MenuID   int64
}

func (q *Queries) UpdateMenuByID(ctx context.Context, arg UpdateMenuByIDParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenuByID,
		arg.Name,
		arg.MenuType,
		arg.Type,
		arg.Price,
		arg.MenuID,
	)
	var i Menu
	err := row.Scan(
		&i.MenuID,
		&i.Name,
		&i.Price,
		&i.MenuType,
		&i.Type,
	)
	return i, err
}

const updateMenuByName = `-- name: UpdateMenuByName :one
UPDATE menu
SET name = ?, menu_type = ? ,type = ?, price = ?
WHERE name = ? 
RETURNING menu_id, name, price, menu_type, type
`

type UpdateMenuByNameParams struct {
	SetName  string
	MenuType string
	Type     sql.NullString
	Price    float64
	Name     string
}

func (q *Queries) UpdateMenuByName(ctx context.Context, arg UpdateMenuByNameParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenuByName,
		arg.SetName,
		arg.MenuType,
		arg.Type,
		arg.Price,
		arg.Name,
	)
	var i Menu
	err := row.Scan(
		&i.MenuID,
		&i.Name,
		&i.Price,
		&i.MenuType,
		&i.Type,
	)
	return i, err
}
