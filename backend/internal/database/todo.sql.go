// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo.sql

package database

import (
	"context"
)

const createToDo = `-- name: CreateToDo :exec
INSERT INTO todo(name)
VALUES(?)
`

func (q *Queries) CreateToDo(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createToDo, name)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM todo
`

func (q *Queries) Delete(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, delete)
	return err
}

const deleteToDo = `-- name: DeleteToDo :exec
DELETE FROM todo
WHERE id = ?
`

func (q *Queries) DeleteToDo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteToDo, id)
	return err
}

const getToDo = `-- name: GetToDo :many
SELECT id, name, complete FROM todo
`

func (q *Queries) GetToDo(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getToDo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Name, &i.Complete); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToDo = `-- name: UpdateToDo :exec
UPDATE todo
SET complete = NOT complete
WHERE id = ?
`

func (q *Queries) UpdateToDo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateToDo, id)
	return err
}
