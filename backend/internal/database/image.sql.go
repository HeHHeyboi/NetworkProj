// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image.sql

package database

import (
	"context"
	"database/sql"
)

const addNewIMG = `-- name: AddNewIMG :one
INSERT INTO image(menu_id, giveAway_id, gallery_name,img_url)
VALUES (?,?,?,?)
RETURNING menu_id, giveaway_id, gallery_name, img_url
`

type AddNewIMGParams struct {
	MenuID      sql.NullInt64
	GiveawayID  sql.NullInt64
	GalleryName sql.NullString
	ImgUrl      string
}

func (q *Queries) AddNewIMG(ctx context.Context, arg AddNewIMGParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, addNewIMG,
		arg.MenuID,
		arg.GiveawayID,
		arg.GalleryName,
		arg.ImgUrl,
	)
	var i Image
	err := row.Scan(
		&i.MenuID,
		&i.GiveawayID,
		&i.GalleryName,
		&i.ImgUrl,
	)
	return i, err
}

const deleteIMG = `-- name: DeleteIMG :exec
DELETE FROM image
`

func (q *Queries) DeleteIMG(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteIMG)
	return err
}

const deleteIMGFromKey = `-- name: DeleteIMGFromKey :many
DELETE FROM image
WHERE menu_id = ? OR giveAway_id = ? OR gallery_name = ?
RETURNING img_url
`

type DeleteIMGFromKeyParams struct {
	MenuID      sql.NullInt64
	GiveawayID  sql.NullInt64
	GalleryName sql.NullString
}

func (q *Queries) DeleteIMGFromKey(ctx context.Context, arg DeleteIMGFromKeyParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, deleteIMGFromKey, arg.MenuID, arg.GiveawayID, arg.GalleryName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var img_url string
		if err := rows.Scan(&img_url); err != nil {
			return nil, err
		}
		items = append(items, img_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteOneIMG = `-- name: DeleteOneIMG :exec
DELETE FROM image
WHERE (menu_id = ? OR giveAway_id = ? OR gallery_name = ?) AND img_url = ?
`

type DeleteOneIMGParams struct {
	MenuID      sql.NullInt64
	GiveawayID  sql.NullInt64
	GalleryName sql.NullString
	ImgUrl      string
}

func (q *Queries) DeleteOneIMG(ctx context.Context, arg DeleteOneIMGParams) error {
	_, err := q.db.ExecContext(ctx, deleteOneIMG,
		arg.MenuID,
		arg.GiveawayID,
		arg.GalleryName,
		arg.ImgUrl,
	)
	return err
}

const getGalleryNameIMG = `-- name: GetGalleryNameIMG :many
select img_url from image
WHERE gallery_name = ?
`

func (q *Queries) GetGalleryNameIMG(ctx context.Context, galleryName sql.NullString) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGalleryNameIMG, galleryName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var img_url string
		if err := rows.Scan(&img_url); err != nil {
			return nil, err
		}
		items = append(items, img_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGiveAwayIMG = `-- name: GetGiveAwayIMG :many
select img_url from image
WHERE giveAway_id = ?
`

func (q *Queries) GetGiveAwayIMG(ctx context.Context, giveawayID sql.NullInt64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGiveAwayIMG, giveawayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var img_url string
		if err := rows.Scan(&img_url); err != nil {
			return nil, err
		}
		items = append(items, img_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuIMG = `-- name: GetMenuIMG :many
select img_url from image
WHERE menu_id = ?
`

func (q *Queries) GetMenuIMG(ctx context.Context, menuID sql.NullInt64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getMenuIMG, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var img_url string
		if err := rows.Scan(&img_url); err != nil {
			return nil, err
		}
		items = append(items, img_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
