// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package database

import (
	"context"
)

const createNewOrder = `-- name: CreateNewOrder :one
INSERT INTO "order"(bill_id, menu_id, amount, total_price,menu_name)
SELECT ?,?,?,? * menu.price, menu.name FROM menu
	WHERE menu.menu_id = ?
RETURNING bill_id, menu_id, amount, total_price, menu_name
`

type CreateNewOrderParams struct {
	BillID       string
	MenuID       int64
	Amount       int64
	CalAmount    float64
	TargetMenuID int64
}

func (q *Queries) CreateNewOrder(ctx context.Context, arg CreateNewOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createNewOrder,
		arg.BillID,
		arg.MenuID,
		arg.Amount,
		arg.CalAmount,
		arg.TargetMenuID,
	)
	var i Order
	err := row.Scan(
		&i.BillID,
		&i.MenuID,
		&i.Amount,
		&i.TotalPrice,
		&i.MenuName,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "order"
`

func (q *Queries) DeleteOrder(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOrder)
	return err
}

const getOrderFromBill = `-- name: GetOrderFromBill :many
SELECT bill_id, menu_id, amount, total_price, menu_name FROM "order" 
WHERE bill_id = ?
`

func (q *Queries) GetOrderFromBill(ctx context.Context, billID string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderFromBill, billID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.BillID,
			&i.MenuID,
			&i.Amount,
			&i.TotalPrice,
			&i.MenuName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
